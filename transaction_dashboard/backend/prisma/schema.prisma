generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transaction {
  id                    BigInt                 @id @default(autoincrement())
  fechaHora             DateTime               @map("fecha_hora") @db.Timestamp(6)
  customerId            Int?                   @map("customer_id")
  empleadoId            Int?                   @map("empleado_id")
  metodoPago            String                 @default("efectivo") @map("metodo_pago")
  total                 Decimal                @default(0) @db.Decimal(12, 2)
  promotion_application PromotionApplication[]
  returns               Return[]
  details               TransactionDetail[]
  customer              Customer?              @relation(fields: [customerId], references: [id], onUpdate: NoAction)
  employee              Employee?              @relation(fields: [empleadoId], references: [id], onUpdate: NoAction)

  @@index([customerId], map: "idx_transactions_customer")
  @@index([empleadoId], map: "idx_transactions_employee")
  @@index([fechaHora], map: "idx_transactions_fecha")
  @@index([metodoPago], map: "idx_transactions_metodo")
  @@map("transactions")
}

model TransactionDetail {
  id                    BigInt                 @id @default(autoincrement())
  transactionId         BigInt                 @map("transaction_id")
  productoId            Int                    @map("producto_id")
  cantidad              Int
  precioUnitario        Decimal                @default(0) @map("precio_unitario") @db.Decimal(12, 2)
  descuentoMonto        Decimal                @default(0) @map("descuento_monto") @db.Decimal(12, 2)
  promoId               Int?                   @map("promo_id")
  loteId                Int?                   @map("lote_id")
  promotion_application PromotionApplication[]
  returns               Return[]
  lot                   ProductLot?            @relation(fields: [loteId], references: [id], onUpdate: NoAction)
  product               Product                @relation(fields: [productoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  promotion             Promotion?             @relation(fields: [promoId], references: [id], onUpdate: NoAction)
  transaction           Transaction            @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([promoId], map: "idx_detail_promo")
  @@index([transactionId, productoId], map: "idx_detail_trans_prod")
  @@index([productoId], map: "idx_transdet_prod")
  @@index([transactionId], map: "idx_transdet_trans")
  @@map("transaction_detail")
}

model Product {
  id                 Int                   @id @default(autoincrement())
  productName        String                @map("product_name")
  categories         String?
  inventory_moves    InventoryMove[]
  lots               ProductLot[]
  priceHistory       ProductPriceHistory[]
  promotions         Promotion[]
  transactionDetails TransactionDetail[]

  @@map("products")
}

model ProductLot {
  id                 Int                 @id @default(autoincrement())
  productId          Int                 @map("product_id")
  expirationDate     DateTime            @map("expiration_date") @db.Date
  loteCode           String?             @map("lote_code")
  inventoryMoves     InventoryMove[]
  product            Product             @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactionDetails TransactionDetail[]

  @@unique([productId, loteCode], map: "uq_product_lots_code")
  @@map("product_lots")
}

model ProductPriceHistory {
  productId     Int      @map("product_id")
  vigente_desde DateTime @db.Timestamp(6)
  precio        Decimal  @db.Decimal(12, 2)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([productId, vigente_desde])
  @@index([productId, vigente_desde], map: "idx_price_hist_product_fecha")
  @@map("product_price_history")
}

model Promotion {
  id                 Int                    @id @default(autoincrement())
  nombre             String
  tipo               String
  scope              String
  product_id         Int?
  categoria          String?
  valor              Decimal?               @db.Decimal(12, 2)
  fechaInicio        DateTime               @map("fecha_inicio") @db.Timestamp(6)
  fechaFin           DateTime               @map("fecha_fin") @db.Timestamp(6)
  activo             Boolean                @default(true)
  applications       PromotionApplication[]
  products           Product?               @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactionDetails TransactionDetail[]

  @@map("promotions")
}

model PromotionApplication {
  id                 Int                @id @default(autoincrement())
  promoId            Int                @map("promo_id")
  transaction_id     BigInt?
  detail_id          BigInt?
  monto_aplicado     Decimal            @db.Decimal(12, 2)
  transaction_detail TransactionDetail? @relation(fields: [detail_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  promotion          Promotion          @relation(fields: [promoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions       Transaction?       @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([detail_id], map: "idx_promo_app_detail")
  @@index([promoId], map: "idx_promo_app_promo")
  @@index([transaction_id], map: "idx_promo_app_trans")
  @@map("promotion_application")
}

model Customer {
  id           Int           @id @default(autoincrement())
  nombre       String
  correo       String?
  telefono     String?
  fecha_alta   DateTime      @default(now()) @db.Timestamp(6)
  transactions Transaction[]

  @@map("customers")
}

model InventoryMove {
  id         Int         @id @default(autoincrement())
  product_id Int
  loteId     Int?        @map("lote_id")
  fecha_hora DateTime    @db.Timestamp(6)
  tipo       String
  cantidad   Int
  ref_type   String
  ref_id     Int?
  lot        ProductLot? @relation(fields: [loteId], references: [id], onUpdate: NoAction)
  products   Product     @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([product_id, fecha_hora], map: "idx_inv_moves_prod_fecha")
  @@index([ref_type, ref_id], map: "idx_inv_moves_ref")
  @@map("inventory_moves")
}

model Return {
  id                      Int               @id @default(autoincrement())
  transaction_id_original BigInt
  detail_id_original      BigInt
  cantidad_devuelta       Int
  fecha_hora              DateTime          @db.Timestamp(6)
  motivo                  String?
  empleado_id             Int?
  transaction_detail      TransactionDetail @relation(fields: [detail_id_original], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employees               Employee?         @relation(fields: [empleado_id], references: [id], onUpdate: NoAction)
  transactions            Transaction       @relation(fields: [transaction_id_original], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([detail_id_original], map: "idx_returns_detail")
  @@index([transaction_id_original], map: "idx_returns_trans")
  @@map("returns")
}

model Employee {
  id           Int             @id @default(autoincrement())
  nombre       String
  shifts       EmployeeShift[]
  returns      Return[]
  transactions Transaction[]

  @@map("employees")
}

model EmployeeShift {
  id          Int      @id @default(autoincrement())
  empleadoId  Int      @map("empleado_id")
  dia_semana  Int
  hora_inicio DateTime @db.Time(6)
  hora_fin    DateTime @db.Time(6)
  employee    Employee @relation(fields: [empleadoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("employee_shifts")
}
