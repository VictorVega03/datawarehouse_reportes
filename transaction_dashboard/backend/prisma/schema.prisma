// backend/prisma/schema.prisma
// Modelo de datos para Dashboard de Transacciones - 2.92M registros

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// MODELO PRINCIPAL - TRANSACCIONES
// ==========================================

model Transaction {
  id                String    @id @default(cuid())
  transactionDate   DateTime  @map("transaction_date")
  customerId        String?   @map("customer_id")
  productName       String    @map("product_name")
  category          String?
  quantity          Int
  unitPrice         Decimal   @map("unit_price") @db.Decimal(10, 2)
  totalAmount       Decimal   @map("total_amount") @db.Decimal(12, 2)
  paymentMethod     String    @map("payment_method")
  discountAmount    Decimal   @default(0) @map("discount_amount") @db.Decimal(10, 2)
  batchLot          String?   @map("batch_lot")
  expiryDate        DateTime? @map("expiry_date") @db.Date
  inventoryStatus   String?   @map("inventory_status")
  
  // Metadata
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relaciones
  customer          Customer? @relation(fields: [customerId], references: [id])
  product           Product?  @relation(fields: [productName], references: [name])

  // Índices para optimización de queries del dashboard
  @@index([transactionDate])
  @@index([customerId])
  @@index([category])
  @@index([paymentMethod])
  @@index([transactionDate, category])
  @@index([transactionDate, customerId])
  @@index([expiryDate])
  @@index([inventoryStatus])
  @@map("transactions")
}

// ==========================================
// MODELO CLIENTES
// ==========================================

model Customer {
  id            String        @id @default(cuid())
  customerCode  String?       @unique @map("customer_code")
  name          String?
  email         String?       @unique
  phone         String?
  address       String?
  city          String?
  country       String?       @default("Mexico")
  
  // Segmentación para análisis
  isVip         Boolean       @default(false) @map("is_vip")
  customerType  CustomerType  @default(REGULAR) @map("customer_type")
  totalSpent    Decimal       @default(0) @map("total_spent") @db.Decimal(12, 2)
  
  // Metadata
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  lastPurchase  DateTime?     @map("last_purchase")

  // Relaciones
  transactions  Transaction[]

  // Índices
  @@index([customerType])
  @@index([isVip])
  @@index([totalSpent])
  @@index([lastPurchase])
  @@map("customers")
}

// ==========================================
// MODELO PRODUCTOS
// ==========================================

model Product {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  category        String?
  brand           String?
  
  // Precios y costos
  currentPrice    Decimal   @map("current_price") @db.Decimal(10, 2)
  costPrice       Decimal?  @map("cost_price") @db.Decimal(10, 2)
  
  // Inventario
  inventoryLevel  Int       @default(0) @map("inventory_level")
  reorderLevel    Int       @default(0) @map("reorder_level")
  maxStock        Int?      @map("max_stock")
  
  // Control de caducidad
  hasBatches      Boolean   @default(false) @map("has_batches")
  daysToExpiry    Int?      @map("days_to_expiry")
  
  // Estado
  isActive        Boolean   @default(true) @map("is_active")
  
  // Metadata
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relaciones
  transactions    Transaction[]
  batches         ProductBatch[]

  // Índices
  @@index([category])
  @@index([isActive])
  @@index([inventoryLevel])
  @@index([reorderLevel])
  @@map("products")
}

// ==========================================
// MODELO LOTES DE PRODUCTOS (Para control caducidad)
// ==========================================

model ProductBatch {
  id            String    @id @default(cuid())
  productName   String    @map("product_name")
  batchNumber   String    @map("batch_number")
  
  // Fechas importantes
  manufactureDate DateTime @map("manufacture_date") @db.Date
  expiryDate    DateTime  @map("expiry_date") @db.Date
  
  // Cantidades
  initialQuantity Int     @map("initial_quantity")
  currentQuantity Int     @map("current_quantity")
  reservedQuantity Int    @default(0) @map("reserved_quantity")
  
  // Estado del lote
  status        BatchStatus @default(ACTIVE)
  location      String?
  
  // Metadata
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relaciones
  product       Product   @relation(fields: [productName], references: [name])

  // Índices críticos para alertas de caducidad
  @@index([expiryDate])
  @@index([status])
  @@index([productName])
  @@unique([productName, batchNumber])
  @@map("product_batches")
}

// ==========================================
// CACHE TABLE (Para nuestro sistema de cache alternativo a Redis)
// ==========================================

model Cache {
  key       String   @id
  data      Json     @db.JsonB
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Índice para limpieza automática de cache expirado
  @@index([expiresAt])
  @@map("app_cache")
}

// ==========================================
// VISTAS MATERIALIZADAS PARA DASHBOARD (Para queries rápidas)
// ==========================================

// Esta será creada con SQL raw después
// CREATE MATERIALIZED VIEW dashboard_metrics AS
// SELECT 
//   DATE_TRUNC('hour', transaction_date) as time_bucket,
//   COUNT(*) as transaction_count,
//   SUM(total_amount) as total_revenue,
//   AVG(total_amount) as avg_transaction,
//   COUNT(DISTINCT customer_id) as unique_customers
// FROM transactions
// GROUP BY DATE_TRUNC('hour', transaction_date);

// ==========================================
// ENUMS
// ==========================================

enum CustomerType {
  VIP
  REGULAR  
  WHOLESALE
  ANONYMOUS
}

enum BatchStatus {
  ACTIVE      // Lote disponible para venta
  EXPIRED     // Lote vencido
  RECALLED    // Lote retirado por calidad
  DEPLETED    // Lote agotado
  RESERVED    // Lote reservado
}

// ==========================================
// ÍNDICES ADICIONALES PARA PERFORMANCE
// ==========================================

// Para análisis por patrones horarios (Caso 1)
// @@index([DATE_TRUNC('hour', transactionDate)]) // Se creará con SQL

// Para análisis de métodos de pago (Caso 6) 
// @@index([paymentMethod, transactionDate])

// Para análisis de ROI y rentabilidad
// @@index([totalAmount, transactionDate])

// Para detección de patrones sospechosos (Caso 7)
// @@index([customerId, transactionDate])
// @@index([totalAmount, customerId])